<reference anchor="I-D.ietf-lsr-distoptflood" target="https://datatracker.ietf.org/doc/html/draft-ietf-lsr-distoptflood-06">
  <front>
    <title>IS-IS Distributed Flooding Reduction</title>
    <author fullname="Russ White" initials="R." surname="White">
      <organization>Akamai</organization>
    </author>
    <author fullname="Shraddha Hegde" initials="S." surname="Hegde">
      <organization>Juniper Networks</organization>
    </author>
    <author fullname="Tony Przygienda" initials="T." surname="Przygienda">
      <organization>Juniper Networks</organization>
    </author>
    <author fullname="Luay Jalil" initials="L." surname="Jalil">
      <organization>Verizon</organization>
    </author>
    <author fullname="Daniel Voyer" initials="D." surname="Voyer">
      <organization>Bell Canada</organization>
    </author>
    <date year="2024" month="August" day="14"/>
    <abstract>
      <t>In dense topologies (such as data center fabrics based on the Clos and butterfly though not limited to those; in fact any topology with relatively high degree of connectivity qualifies here) IGP flooding mechanisms designed originally for rather sparse topologies can "overflood", or in other words generate too many identical copies of same information arriving at a given node from other devices. This normally results in slower convergence times and higher resource utilization to process and discard the superfluous copies. Distributed algorithms that restrict the amount of flooding performed can be constructed, as long as they result in a flooding subgraph connecting all nodes on the network in terms of flooding still. Such algorithms can reduce resource utilization significantly, while improving convergence performance. We denote such algorithm as "distributed flooding prunners" (or "prunner" for short) while requiring them to follow some simple, additional rules. The rules presented in detail later allow to deploy mix of nodes any prunning algorithm and multiple prunners at the same time if necessary while ensuring correct flood coverage for the whole network. Additionally, node by node migration, without flag day, from one algorithm to another if necessary is possible. And assuming the algorithms are behaving correctly, the blast radius on algorithm change is normally contained to a single node performing the switch and obviously the convergence of an algorithm on introduction or removal of node running such algorithm. One such algorithm (modification of previous art), deployable even without configuration, is described in this document. Beside reducing the extraneous copies, the proposed solution does "load- balance" flooding across different possible paths in the network to prevent build up of flooding hot-spots.</t>
    </abstract>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-lsr-distoptflood-06"/>
</reference>