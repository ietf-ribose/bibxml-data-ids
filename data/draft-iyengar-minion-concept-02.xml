<reference anchor="I-D.iyengar-minion-concept">
  <front>
    <title>Minion - Service Model and Conceptual API</title>
    <seriesInfo name="Internet-Draft" value="draft-iyengar-minion-concept-02"/>
    <author>
      <organization abbrev="IETF">Internet Engineering Task Force</organization>
    </author>
    <author fullname="Janardhan Iyengar"/>
    <author fullname="Stuart Cheshire"/>
    <author fullname="Josh Graessley"/>
    <date year="2013" month="October" day="21"/>
    <abstract>
      <t>Minion uses TCP-format packets on-the-wire, to provide full compatibility with existing NATs, Firewalls, and similar middleboxes, but provides a richer set of facilities to the application. Minion's richer facilities include a message-oriented API rather than TCP's unstructured byte-stream service model, multiplexing of multiple messages (or message streams) on a single connection, interleaving of multiplexed messages (to eliminate head-of-line blocking), message cancellation, request/reply support, ordered and unordered messages, superseding messages, chained messages, multiple priority levels with byte-granularity preemption, and DTLS Security. Minion can be implemented entirely as a user-level library, without waiting for any special support from OS vendors, and provides immediate benefits to application developers. Additionally, Minion is able to take advantage of some simple kernel extensions to provide enhanced services that go beyond what is possible with traditional TCP. These kernel extensions are optional, and even without them, Minion offers worthwhile benefits to application developers.</t>
    </abstract>
  </front>
</reference>