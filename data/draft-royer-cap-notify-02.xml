<reference anchor="I-D.royer-cap-notify">
  <front>
    <title>iCalendar notification of upcoming VEVENTs, VTODOs, VALARMs or any changes</title>
    <seriesInfo name="Internet-Draft" value="draft-royer-cap-notify-02"/>
    <author fullname="Doug Royer" initials="D." surname="Royer">
      <organization>INET-Consulting</organization>
    </author>
    <date year="2003" month="October" day="2"/>
    <abstract>
      <t>This memo describes a method used to ask for and receivenotifications. These notifications will be the direct result of astored components and the notifications or changes to components orthe store and are represented in iCalendar format. This is anextensions to iCalendar objects.This memo has been updated to include non-CAP notificaitons.This memo includes a new CAP command types of 'REQUEST-NOTIFY','NOTIFICATION', and 'CANCEL-NOTIFY', a new property of 'OBSERVER', anew iCalendar component 'NOTIFICATION', CAP capabilities of'CAN-NOTIFY', 'NOTIFY-UPDATES', and 'ALLOW-NOTIFY-BOT'. A'REQUEST-NOTIFY' command is a request to add an observer to ancomponent in the 'TARGET' calendar. In addition the 'REQUEST-NOTIFY'command can alert the CUA of changes to specific components or in thecalendar or calendar store. Everything is subject to VCARrestrictions.These are asynchronous notifications must be advertised by the CS andrequested by the CUA. This memo discusses how to transport theseiCalendar objects and using them with CAP.In addition if the CS and CUA support the 'NOTIFY-UPDATES'capability, then the CS will send 'NOTIFICATION' components to theCUA describing the UIDs or TARGETS that have changed since thecurrently authenticated CU was last connected allowing for easiersynchronization.</t>
    </abstract>
  </front>
</reference>